// Code generated by protoc-gen-go.
// source: nyt-proxy.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	nyt-proxy.proto

It has these top-level messages:
	MostPopularRequest
	MostPopularResponse
	CatsRequest
	CatsResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import nyt "github.com/nytimes/gizmo/examples/nyt"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type MostPopularRequest struct {
	ResourceType   string `protobuf:"bytes,1,opt,name=resourceType" json:"resourceType,omitempty"`
	Section        string `protobuf:"bytes,2,opt,name=section" json:"section,omitempty"`
	TimePeriodDays uint32 `protobuf:"varint,3,opt,name=timePeriodDays" json:"timePeriodDays,omitempty"`
}

func (m *MostPopularRequest) Reset()         { *m = MostPopularRequest{} }
func (m *MostPopularRequest) String() string { return proto.CompactTextString(m) }
func (*MostPopularRequest) ProtoMessage()    {}

type MostPopularResponse struct {
	Results []*nyt.MostPopularResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *MostPopularResponse) Reset()         { *m = MostPopularResponse{} }
func (m *MostPopularResponse) String() string { return proto.CompactTextString(m) }
func (*MostPopularResponse) ProtoMessage()    {}

func (m *MostPopularResponse) GetResults() []*nyt.MostPopularResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type CatsRequest struct {
}

func (m *CatsRequest) Reset()         { *m = CatsRequest{} }
func (m *CatsRequest) String() string { return proto.CompactTextString(m) }
func (*CatsRequest) ProtoMessage()    {}

type CatsResponse struct {
	Results []*nyt.SemanticConceptArticle `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *CatsResponse) Reset()         { *m = CatsResponse{} }
func (m *CatsResponse) String() string { return proto.CompactTextString(m) }
func (*CatsResponse) ProtoMessage()    {}

func (m *CatsResponse) GetResults() []*nyt.SemanticConceptArticle {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
}

// Client API for NYTProxyService service

type NYTProxyServiceClient interface {
	GetMostPopular(ctx context.Context, in *MostPopularRequest, opts ...grpc.CallOption) (*MostPopularResponse, error)
	GetCats(ctx context.Context, in *CatsRequest, opts ...grpc.CallOption) (*CatsResponse, error)
}

type nYTProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewNYTProxyServiceClient(cc *grpc.ClientConn) NYTProxyServiceClient {
	return &nYTProxyServiceClient{cc}
}

func (c *nYTProxyServiceClient) GetMostPopular(ctx context.Context, in *MostPopularRequest, opts ...grpc.CallOption) (*MostPopularResponse, error) {
	out := new(MostPopularResponse)
	err := grpc.Invoke(ctx, "/service.NYTProxyService/GetMostPopular", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nYTProxyServiceClient) GetCats(ctx context.Context, in *CatsRequest, opts ...grpc.CallOption) (*CatsResponse, error) {
	out := new(CatsResponse)
	err := grpc.Invoke(ctx, "/service.NYTProxyService/GetCats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NYTProxyService service

type NYTProxyServiceServer interface {
	GetMostPopular(context.Context, *MostPopularRequest) (*MostPopularResponse, error)
	GetCats(context.Context, *CatsRequest) (*CatsResponse, error)
}

func RegisterNYTProxyServiceServer(s *grpc.Server, srv NYTProxyServiceServer) {
	s.RegisterService(&NYTProxyService_serviceDesc, srv)
}

func _NYTProxyService_GetMostPopular_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(MostPopularRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NYTProxyServiceServer).GetMostPopular(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NYTProxyService_GetCats_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CatsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NYTProxyServiceServer).GetCats(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var NYTProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NYTProxyService",
	HandlerType: (*NYTProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMostPopular",
			Handler:    _NYTProxyService_GetMostPopular_Handler,
		},
		{
			MethodName: "GetCats",
			Handler:    _NYTProxyService_GetCats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
